package UI;

import Beans.CategoryBean;
import Beans.IngredientBean;
import Beans.RawBean;
import Beans.RecipeBean;
import Beans.SalesBean;
import DAO.Implementation.IngredientDAOImplementation;
import DAO.Implementation.RawDAOImplementation;
import DAO.Implementation.RecipeDAOImplementation;
import DAO.Implementation.SalesDAOImplementation;
import DAO.Implementation.TransactionDAOImplementation;
import DAO.Interface.IngredientDAOInterface;
import DAO.Interface.RawDAOInterface;
import DAO.Interface.RecipeDAOInterface;
import DAO.Interface.SalesDAOInterface;
import DAO.Interface.TransactionDAOInterface;
import java.awt.Color;
import java.awt.Component;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultCellEditor;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY_OR_MOVE;
import static javax.swing.TransferHandler.MOVE;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.jfree.text.TextBox;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Evy
 */
public class SALES extends javax.swing.JFrame {

    private RecipeDAOInterface rcImp = new RecipeDAOImplementation();
    private RawDAOInterface rwImp = new RawDAOImplementation();
    private IngredientDAOInterface inImp = new IngredientDAOImplementation();
    private SalesDAOInterface tcImp = new SalesDAOImplementation();
    private ArrayList<RecipeBean> avRecipes;
    EODTab main;
    private String date;

    /**
     * Creates new form SALES
     */
    public SALES(EODTab t, String d) throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {
        String laf = UIManager.getSystemLookAndFeelClassName();
        UIManager.setLookAndFeel(laf);
        initComponents();
        main = t;
        errorLabel.setVisible(false);
        prepareTable();
        checkDate();
        date = d;

        /*insert code: DISABLE SUBMIT BTN*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        recipeTable = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int c){
                if(c == 2 || c == 3)
                return true;
                return false;
            }
        };
        jLabel5 = new javax.swing.JLabel();
        submitSales = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(956, 555));

        jPanel1.setPreferredSize(new java.awt.Dimension(956, 555));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel1.setText("SALES");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 15, -1, -1));

        recipeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        recipeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                recipeTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(recipeTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 79, 880, 129));
<<<<<<< HEAD
=======

        inputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Recipe Information"));

        jLabel2.setText("Name:");

        jLabel3.setText("Sales:");

        enterSales.setText("ENTER");
        enterSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterSalesActionPerformed(evt);
            }
        });

        salesField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesFieldActionPerformed(evt);
            }
        });

        jLabel4.setText("Compliment: ");

        nameLabel.setText(" ");

        errorLabel.setForeground(new java.awt.Color(204, 0, 51));
        errorLabel.setText("ERROR: Please enter valid number");

        errorLabel1.setForeground(new java.awt.Color(204, 0, 51));
        errorLabel1.setText("ERROR: Please enter valid number");

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(enterSales)
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(28, 28, 28)
                                .addComponent(complimentaryField, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errorLabel1))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(salesField, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errorLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(salesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(errorLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(complimentaryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(errorLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(enterSales))
        );

        jPanel1.add(inputPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 460, 160));
>>>>>>> 48111f9bc2377ab9d7e49c9257c8a6b79128378b

        jLabel5.setText("Drag and Drop to re-arrange recipes");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 51, -1, -1));

        submitSales.setText("SUBMIT");
        submitSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitSalesActionPerformed(evt);
            }
        });
        jPanel1.add(submitSales, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 440, 140, -1));

        backBtn.setText("BACK");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        jPanel1.add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 490, -1, -1));
<<<<<<< HEAD

        errorLabel.setForeground(new java.awt.Color(204, 0, 51));
        errorLabel.setText("ERROR: Please enter valid number");
        jPanel1.add(errorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 270, -1, 20));
=======
>>>>>>> 48111f9bc2377ab9d7e49c9257c8a6b79128378b

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 932, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitSalesActionPerformed
        int rcount = recipeTable.getRowCount();
        int i, j;

        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this recipe?", "Confirm Delete", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

            for (i = 0; i < rcount; i++) {
                SalesBean sbean = new SalesBean();
                SalesBean cbean = new SalesBean();
                float total = 0;
                float d;
                float a;
                ArrayList<IngredientBean> ingredients = new ArrayList<IngredientBean>();
                int rID = Integer.parseInt(recipeTable.getModel().getValueAt(i, 0).toString());
                float sales = Float.parseFloat(recipeTable.getModel().getValueAt(i, 2).toString());
                float compliment = Float.parseFloat(recipeTable.getModel().getValueAt(i, 3).toString());

                RecipeBean rbean = rcImp.getRecipeBean(rID);

                //add sales
                sbean.setOrder(i + 1);
                sbean.setType("sales");
                tcImp.addSales(sbean, rbean, sales);

                //add compliment
                cbean.setOrder(i + 1);
                cbean.setType("complimentary");
                tcImp.addSales(cbean, rbean, compliment, date);

                //update rm stocks
                total = sales + compliment;
                ingredients = rbean.getIngredients();
                for (j = 0; j < ingredients.size(); j++) {
                    d = 0;
                    a = 0;
                    RawBean rwbean = new RawBean();
                    rwbean = ingredients.get(j).getRaw();
                    a = rwbean.getStock(); //original stock
                    d = ingredients.get(j).getAmount() * total; //to be deducted
                    a -= d;
                    rwbean.setStock(a);
                    rwImp.editRaw(rwbean);
                }

            }
            if (inputLockDown()) {
                submitSales.setVisible(false);
            }
        //this.setVisible(false);
            //main.setVisible(true);

        } else {
            return;
        }
    }//GEN-LAST:event_submitSalesActionPerformed

    private void recipeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_recipeTableMouseClicked
        try {
            int rselect = recipeTable.getSelectedRow();

            //recipeIDLabel.setText(String.valueOf(r.getRecipeID()));
            //CategoryBean ct = (CategoryBean)categoryBox.getSelectedItem();
            //System.out.println("SELECTED " + ct.getCategoryID());
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_recipeTableMouseClicked

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        this.setVisible(false);
        main.setVisible(true);
    }//GEN-LAST:event_backBtnActionPerformed
    /**
     * * <--- CLARK'S CODE STARTS HERE ---> **
     */

    public boolean inputLockDown() {
        boolean flag = false;
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date d = new Date();
        String curDate = dateFormat.format(d);

        try {
            String filepath = "btf.xml";
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);

            String sales = doc.getElementsByTagName("sales").item(0).getTextContent();
            //System.out.println(sales);
            if (sales.equals("0")) {
                doc.getElementsByTagName("sales").item(0).setTextContent("1");
            } else if (sales.equals("1")) {
                doc.getElementsByTagName("sales").item(0).setTextContent("2");
                flag = true;
            } else if (sales.equals("2")) {
                flag = true;
                return flag;
            }

            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(filepath));
            transformer.transform(source, result);

        } catch (Exception e) {
            e.printStackTrace();
        }

        return flag;
    }

    public void checkDate() {
        try {
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date d = new Date();
            String curDate = dateFormat.format(d);
            Calendar cal = Calendar.getInstance();
            cal.add(Calendar.DATE, +1);
            String nextDate = dateFormat.format(cal.getTime());

            String actual = main.getValueXML("actual");

            if (main.getDateXML().equals(curDate)) {
                if (actual.equals("0") || actual.equals("1")) {
                    submitSales.setVisible(true);
                } else if (actual.equals("2")) {
                    submitSales.setVisible(false);
                }
            } else if (main.getDateXML().equals(nextDate)) {
                submitSales.setVisible(false);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * * <--- CLARK'S CODE ENDS HERE ---> **
     */
    /**
     * * <--- JANERYS CODE STARTS HERE ---> **
     */
    //check if number
    private boolean isNumber(String s) {
        try {
            Float.parseFloat(s);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /* PREPARE TABLE */
    public void prepareTable() {
        avRecipes = new ArrayList<RecipeBean>();

        String rCategory = null;
        int i, j;

        avRecipes = rcImp.getRecipeByStatus("available");

        String cols[] = {"Recipe ID", "Recipe", "Sales", "Compliment"};
        DefaultTableModel recipeModel = new DefaultTableModel(cols, 0);
        //System.out.println(avRecipes.get(1).getRecipe());

        for (RecipeBean r : avRecipes) {
            Object[] data = {r.getRecipeID(), r.getRecipe(), "0", "0"};
            recipeModel.addRow(data);
        }

        recipeTable.setModel(recipeModel);
        recipeTable.getColumnModel().getColumn(0).setMinWidth(0);
        recipeTable.getColumnModel().getColumn(0).setMaxWidth(0);

        recipeTable.setDragEnabled(true);
        recipeTable.setTransferHandler(new SALES.TableTransferHandler());
        adjustTable(recipeTable);

        /**
         * * <--- KIM PLS NOTE: THIS HOW TO APPLY THE MYCHECKER TO YOUR TABLE..
         * errorLabel = JLabel for displaying error ---> **
         */
        /* KAHIT ONE ERROR LABEL NA LANG THAT SAYS: ERROR: Please enter valid number. */
        DefaultCellEditor deditor = new myChecker(new JTextField(), errorLabel);
        recipeTable.setDefaultEditor(Object.class, deditor);
        /**
         * * <--- KIM PLS NOTE ENDS HERE ---> **
         */
    }

    /* ADJUST TABLE TO MAX WIDTH*/
    private void adjustTable(JTable table) {
        for (int column = 0; column < table.getColumnCount(); column++) {
            TableColumn tableColumn = table.getColumnModel().getColumn(column);
            int preferredWidth = tableColumn.getMinWidth();
            int maxWidth = tableColumn.getMaxWidth();

            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
                Component c = table.prepareRenderer(cellRenderer, row, column);
                int width = c.getPreferredSize().width + table.getIntercellSpacing().width;
                preferredWidth = Math.max(preferredWidth, width);

                //  We've exceeded the maximum width, no need to check other rows
                if (preferredWidth >= maxWidth) {
                    preferredWidth = maxWidth;
                    break;
                }
            }

            tableColumn.setPreferredWidth(preferredWidth);
        }
    }

    /**
     * <--- KIM PLS NOTE: COPY THIS WHOLE THING FOR THE ERROR CHECKING ---> **
     */
    private static class myChecker extends DefaultCellEditor {

        private static final Border red = new LineBorder(Color.red);
        private static final Border black = new LineBorder(Color.black);
        private JTextField textField;
        private JLabel eLabel;

        public myChecker(JTextField textField, JLabel e) {
            super(textField);
            this.textField = textField;
            this.textField.setHorizontalAlignment(JTextField.RIGHT);
            eLabel = e;
        }

        @Override
        public boolean stopCellEditing() {
            try {
                float v = Float.parseFloat(textField.getText());
                if (v < 0) {
                    throw new NumberFormatException();
                }
                textField.setText(String.format("%.02f", v));
                eLabel.setVisible(false);
            } catch (NumberFormatException e) {
                textField.setBorder(red);
                eLabel.setVisible(true);
                return false;
            }
            return super.stopCellEditing();
        }

        @Override
        public Component getTableCellEditorComponent(JTable table,
                Object value, boolean isSelected, int row, int column) {
            textField.setBorder(black);
            return super.getTableCellEditorComponent(
                    table, value, isSelected, row, column);
        }

    }

    /**
     * <--- KIM PLS NOTE: COPY THIS WHOLE THING FOR THE ERROR CHECKING ---> **
     */
    /**
     * * <--- JANERYS CODE ENDS HERE ---> **
     */
    /**
     * * <--- CODE CREDITS:
     * http://www.java2s.com/Code/Java/Swing-JFC/ExtendedDnDDragandDropDemo.htm
     * ---> **
     */
    /*
     * StringTransferHandler.java is used by the 1.4 ExtendedDnDDemo.java example.
     */
    abstract class StringTransferHandler extends TransferHandler {

        protected abstract String exportString(JComponent c);

        protected abstract void importString(JComponent c, String str);

        protected abstract void cleanup(JComponent c, boolean remove);

        protected Transferable createTransferable(JComponent c) {
            return new StringSelection(exportString(c));
        }

        public int getSourceActions(JComponent c) {
            return COPY_OR_MOVE;
        }

        public boolean importData(JComponent c, Transferable t) {
            if (canImport(c, t.getTransferDataFlavors())) {
                try {
                    String str = (String) t
                            .getTransferData(DataFlavor.stringFlavor);
                    importString(c, str);
                    return true;
                } catch (UnsupportedFlavorException ufe) {
                } catch (IOException ioe) {
                }
            }

            return false;
        }

        protected void exportDone(JComponent c, Transferable data, int action) {
            cleanup(c, action == MOVE);
        }

        public boolean canImport(JComponent c, DataFlavor[] flavors) {
            for (int i = 0; i < flavors.length; i++) {
                if (DataFlavor.stringFlavor.equals(flavors[i])) {
                    return true;
                }
            }
            return false;
        }
    }

    /*
     * TableTransferHandler.java is used by the 1.4 ExtendedDnDDemo.java example.
     */
    class TableTransferHandler extends StringTransferHandler {

        private int[] rows = null;

        private int addIndex = -1; //Location where items were added

        private int addCount = 0; //Number of items added.

        protected String exportString(JComponent c) {
            //System.out.println("export");
            JTable table = (JTable) c;
            rows = table.getSelectedRows();
            int colCount = table.getColumnCount();

            StringBuffer buff = new StringBuffer();

            for (int i = 0; i < rows.length; i++) {
                for (int j = 0; j < colCount; j++) {
                    Object val = table.getValueAt(rows[i], j);
                    buff.append(val == null ? "" : val.toString());
                    if (j != colCount - 1) {
                        buff.append(",");
                    }
                }
                if (i != rows.length - 1) {
                    buff.append("\n");
                }
            }
            System.out.println(rows[0]);

            return buff.toString();
        }

        protected void importString(JComponent c, String str) {
            //System.out.println("import");
            JTable target = (JTable) c;
            DefaultTableModel model = (DefaultTableModel) target.getModel();
            int index = target.getSelectedRow();

            //Prevent the user from dropping data back on itself.
            //For example, if the user is moving rows #4,#5,#6 and #7 and
            //attempts to insert the rows after row #5, this would
            //be problematic when removing the original rows.
            //So this is not allowed.
            if (rows != null && index >= rows[0] - 1
                    && index <= rows[rows.length - 1] & rows.length != 1) {
                int x = rows[0] - 1;
                int y = rows[rows.length - 1];
                /*System.out.println("index (target row) = " + index);
                 System.out.println("rows[0] (source row) = " + rows[0]);
                 System.out.println("x = " + x);
                 System.out.println("y = " + y);
                 System.out.println("NOT ALLOWED");*/
                System.out.println();
                rows = null;
                return;
            }

            int max = model.getRowCount();
            if (index < 0) {
                index = max;
            } else {
                index++;
                if (index > max) {
                    index = max;
                }
            }
            addIndex = index;
            //System.out.println(index);
            String[] values = str.split("\n");
            addCount = values.length;
            int colCount = target.getColumnCount();
            for (int i = 0; i < values.length && i < colCount; i++) {
                model.insertRow(index++, values[i].split(","));

            }
        }

        protected void cleanup(JComponent c, boolean remove) {

            //System.out.println("clean");
            JTable source = (JTable) c;
            if (remove && rows != null) {
                DefaultTableModel model = (DefaultTableModel) source.getModel();

                //If we are moving items around in the same table, we
                //need to adjust the rows accordingly, since those
                //after the insertion point have moved.
                if (addCount > 0) {
                    for (int i = 0; i < rows.length; i++) {
                        if (rows[i] >= addIndex) {
                            rows[i] += addCount;
                        }
                    }
                }

                for (int i = rows.length - 1; i >= 0; i--) {
                    model.removeRow(rows[i]);

                }

            }
            rows = null;
            addCount = 0;
            addIndex = -1;
        }
    }
    /**
     * * <--- CODE CREDITS:
     * http://www.java2s.com/Code/Java/Swing-JFC/ExtendedDnDDragandDropDemo.htm
     * ---> **
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable recipeTable;
    private javax.swing.JButton submitSales;
    // End of variables declaration//GEN-END:variables
}
