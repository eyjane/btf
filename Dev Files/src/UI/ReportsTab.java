package UI;

import Beans.IngredientBean;
import Beans.RawBean;
import Beans.RecipeBean;
import DAO.Implementation.IngredientDAOImplementation;
import DAO.Implementation.RecipeDAOImplementation;
import DAO.Implementation.SalesDAOImplementation;
import DAO.Implementation.TransactionDAOImplementation;
import DAO.Interface.IngredientDAOInterface;
import DAO.Interface.RecipeDAOInterface;
import DAO.Interface.SalesDAOInterface;
import DAO.Interface.TransactionDAOInterface;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import org.apache.poi.hssf.usermodel.HSSFClientAnchor;
import org.apache.poi.hssf.usermodel.HSSFPatriarch;
import org.apache.poi.hssf.usermodel.HSSFPicture;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.ss.util.CellUtil;
import org.jdesktop.swingx.calendar.CalendarUtils;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;
import org.joda.time.*;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

/**
 *
 * @author Catherine
 */
public class ReportsTab extends javax.swing.JFrame {

    ArrayList<RecipeBean> aSales = new ArrayList<RecipeBean>();
    SalesDAOInterface sImp = new SalesDAOImplementation();
    RecipeDAOInterface rcImp = new RecipeDAOImplementation();
    IngredientDAOInterface inImp = new IngredientDAOImplementation();
    TransactionDAOInterface tcImp = new TransactionDAOImplementation();
    JFreeChart expChart, giChart, netChart;

    public ReportsTab() throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {
        String laf = UIManager.getSystemLookAndFeelClassName();
        UIManager.setLookAndFeel(laf);
        initComponents();
        startDate.setDate(new Date());
        endDate.setDate(new Date());
        dateErrorLabel1.setVisible(false);
        dateErrorLabel2.setVisible(false);
        dateErrorLabel3.setVisible(false);
        jTabbedPane1.addChangeListener(changeListener);

        //set tables unresizable
        salesTable.getTableHeader().setResizingAllowed(false);
        expensesTable.getTableHeader().setResizingAllowed(false);
        grossIncomeTable.getTableHeader().setResizingAllowed(false);
        netIncomeTable.getTableHeader().setResizingAllowed(false);
        varianceTable.getTableHeader().setResizingAllowed(false);

        //set tables to be sortable
        salesTable.setAutoCreateRowSorter(true);
        expensesTable.setAutoCreateRowSorter(true);
        grossIncomeTable.setAutoCreateRowSorter(true);
        netIncomeTable.setAutoCreateRowSorter(true);
        varianceTable.setAutoCreateRowSorter(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        InventoryBtn = new javax.swing.JButton();
        RMBtn = new javax.swing.JButton();
        RecipesBtn = new javax.swing.JButton();
        CategoriesBtn = new javax.swing.JButton();
        EODBtn = new javax.swing.JButton();
        ReportsBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Sales = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        salesTable = new javax.swing.JTable(){
            @Override
            public boolean isCellEditable(int r, int c){
                return false;
            }
        };
        btnExportSales = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        expensesTable = new javax.swing.JTable();
        btnExportExpenses = new javax.swing.JButton();
        expensesPanel = new javax.swing.JPanel();
        dateErrorLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        grossIncomeTable = new javax.swing.JTable();
        btnExportGrossIncome = new javax.swing.JButton();
        grossPanel = new javax.swing.JPanel();
        dateErrorLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        netIncomeTable = new javax.swing.JTable();
        btnExportNetIncome = new javax.swing.JButton();
        netIncomePanel = new javax.swing.JPanel();
        dateErrorLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        varianceTable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        btnExportVariance = new javax.swing.JButton();
        varianceDate = new org.jdesktop.swingx.JXDatePicker();
        fromLabel = new javax.swing.JLabel();
        startDate = new org.jdesktop.swingx.JXDatePicker();
        toLabel = new javax.swing.JLabel();
        endDate = new org.jdesktop.swingx.JXDatePicker();
        generateBtn = new javax.swing.JButton();
        dateError = new javax.swing.JLabel();
        Background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        InventoryBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Inventory Btn.png"))); // NOI18N
        InventoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InventoryBtnActionPerformed(evt);
            }
        });
        jPanel1.add(InventoryBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 239, 60));

        RMBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/RM Btn.png"))); // NOI18N
        RMBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RMBtnActionPerformed(evt);
            }
        });
        jPanel1.add(RMBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 220, 239, 60));

        RecipesBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Recipes Btn.png"))); // NOI18N
        RecipesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecipesBtnActionPerformed(evt);
            }
        });
        jPanel1.add(RecipesBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 290, 239, 60));

        CategoriesBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Categories Btn.png"))); // NOI18N
        CategoriesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoriesBtnActionPerformed(evt);
            }
        });
        jPanel1.add(CategoriesBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 360, 239, 60));

        EODBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/EOD Btn.png"))); // NOI18N
        EODBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EODBtnActionPerformed(evt);
            }
        });
        jPanel1.add(EODBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 430, 239, 60));

        ReportsBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Reports Btn.png"))); // NOI18N
        ReportsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReportsBtnActionPerformed(evt);
            }
        });
        jPanel1.add(ReportsBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 500, 239, 60));

        jLabel1.setFont(new java.awt.Font("Quicksand Light", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Reports");
        jLabel1.setToolTipText("");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, -1, -1));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jTabbedPane1.setForeground(new java.awt.Color(255, 0, 204));
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setFont(new java.awt.Font("Quicksand Light", 0, 14)); // NOI18N
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(352, 438));

        salesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Beginning", "Delivery", "Sales", "Wastages", "EOD", "Variance"
            }
        ));
        jScrollPane9.setViewportView(salesTable);

        btnExportSales.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/ExportBtn.png"))); // NOI18N
        btnExportSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportSalesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SalesLayout = new javax.swing.GroupLayout(Sales);
        Sales.setLayout(SalesLayout);
        SalesLayout.setHorizontalGroup(
            SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                    .addGroup(SalesLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnExportSales, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        SalesLayout.setVerticalGroup(
            SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SalesLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(btnExportSales, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("SALES", Sales);

        expensesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(expensesTable);

        btnExportExpenses.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/ExportBtn.png"))); // NOI18N
        btnExportExpenses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportExpensesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout expensesPanelLayout = new javax.swing.GroupLayout(expensesPanel);
        expensesPanel.setLayout(expensesPanelLayout);
        expensesPanelLayout.setHorizontalGroup(
            expensesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 565, Short.MAX_VALUE)
        );
        expensesPanelLayout.setVerticalGroup(
            expensesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 181, Short.MAX_VALUE)
        );

        dateErrorLabel1.setFont(new java.awt.Font("Quicksand Light", 0, 14)); // NOI18N
        dateErrorLabel1.setForeground(new java.awt.Color(255, 0, 1));
        dateErrorLabel1.setText("ERROR: Range must be valid.");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(expensesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(dateErrorLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExportExpenses, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnExportExpenses, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateErrorLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(expensesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("EXPENSES", jPanel4);

        grossIncomeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(grossIncomeTable);

        btnExportGrossIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/ExportBtn.png"))); // NOI18N
        btnExportGrossIncome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportGrossIncomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout grossPanelLayout = new javax.swing.GroupLayout(grossPanel);
        grossPanel.setLayout(grossPanelLayout);
        grossPanelLayout.setHorizontalGroup(
            grossPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        grossPanelLayout.setVerticalGroup(
            grossPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 181, Short.MAX_VALUE)
        );

        dateErrorLabel2.setFont(new java.awt.Font("Quicksand Light", 0, 14)); // NOI18N
        dateErrorLabel2.setForeground(new java.awt.Color(255, 0, 1));
        dateErrorLabel2.setText("ERROR: Range must be valid.");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(grossPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addComponent(dateErrorLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExportGrossIncome, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnExportGrossIncome, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateErrorLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(grossPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("GROSS INCOME", jPanel5);

        netIncomeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(netIncomeTable);

        btnExportNetIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/ExportBtn.png"))); // NOI18N
        btnExportNetIncome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportNetIncomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout netIncomePanelLayout = new javax.swing.GroupLayout(netIncomePanel);
        netIncomePanel.setLayout(netIncomePanelLayout);
        netIncomePanelLayout.setHorizontalGroup(
            netIncomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        netIncomePanelLayout.setVerticalGroup(
            netIncomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 181, Short.MAX_VALUE)
        );

        dateErrorLabel3.setFont(new java.awt.Font("Quicksand Light", 0, 14)); // NOI18N
        dateErrorLabel3.setForeground(new java.awt.Color(255, 0, 1));
        dateErrorLabel3.setText("ERROR: Range must be valid.");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(dateErrorLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExportNetIncome, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                    .addComponent(netIncomePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnExportNetIncome, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateErrorLabel3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(netIncomePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("NET INCOME", jPanel3);

        varianceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Beginning", "Delivery", "Sales", "Wastages", "EOD", "Variance"
            }
        ));
        jScrollPane6.setViewportView(varianceTable);

        jLabel8.setFont(new java.awt.Font("Quicksand Light", 0, 14)); // NOI18N
        jLabel8.setText("Date:");

        btnExportVariance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/ExportBtn.png"))); // NOI18N
        btnExportVariance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportVarianceActionPerformed(evt);
            }
        });

        varianceDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                varianceDateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(varianceDate, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExportVariance, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(varianceDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnExportVariance, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("VARIANCE", jPanel2);

        fromLabel.setFont(new java.awt.Font("Quicksand Light", 0, 14)); // NOI18N
        fromLabel.setText("From:");

        startDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startDateActionPerformed(evt);
            }
        });

        toLabel.setFont(new java.awt.Font("Quicksand Light", 0, 14)); // NOI18N
        toLabel.setText("To:");

        endDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endDateActionPerformed(evt);
            }
        });

        generateBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/EnterBtn.png"))); // NOI18N
        generateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateBtnActionPerformed(evt);
            }
        });

        dateError.setFont(new java.awt.Font("Quicksand Light", 0, 14)); // NOI18N
        dateError.setForeground(new java.awt.Color(255, 0, 1));
        dateError.setText("ERROR: Range must be valid.");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(fromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(toLabel))
                            .addComponent(dateError))
                        .addGap(18, 18, 18)
                        .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                        .addComponent(generateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(0, 9, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(generateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fromLabel)
                            .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toLabel)
                            .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateError)
                        .addGap(3, 3, 3)))
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleParent(jPanel6);

        jPanel1.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 90, 600, 440));

        Background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Background6.png"))); // NOI18N
        jPanel1.add(Background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 920, 560));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InventoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InventoryBtnActionPerformed
        try {
            InventoryTab in = new InventoryTab();
            in.setVisible(true);
            dispose();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(InventoryTab.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(InventoryTab.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(InventoryTab.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(InventoryTab.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_InventoryBtnActionPerformed

    private void RMBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RMBtnActionPerformed
        try {
            RMManagement rm = new RMManagement();
            rm.setVisible(true);
            dispose();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(RMManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(RMManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(RMManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(RMManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_RMBtnActionPerformed

    private void RecipesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecipesBtnActionPerformed
        try {
            RCManagement rc = new RCManagement();
            rc.setVisible(true);
            dispose();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(RCManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(RCManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(RCManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(RCManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_RecipesBtnActionPerformed

    private void CategoriesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoriesBtnActionPerformed
        try {
            CGManagement cg = new CGManagement();
            cg.setVisible(true);
            dispose();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CGManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(CGManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(CGManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(CGManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CategoriesBtnActionPerformed

    private void btnExportExpensesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportExpensesActionPerformed
        //DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
       //Date d = new Date();
       String path = "btf expenses reports.xls" ;
       
       DateFormat t = new SimpleDateFormat("yyyy-MM-dd");
       Date sDate = startDate.getDate();
       Date eDate = endDate.getDate();   
       String date = t.format(sDate) + " to " + t.format(eDate);
       
       //DateItem date = (DateItem) dateCombo.getSelectedItem();
       checkExcelExist(expensesTable, path, date, "Expenses");
       exportChart(expChart, path, "Expenses", 442, 310);
    }//GEN-LAST:event_btnExportExpensesActionPerformed

    private void btnExportGrossIncomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportGrossIncomeActionPerformed
       String path = "btf gross income reports.xls" ;
       
       DateFormat t = new SimpleDateFormat("yyyy-MM-dd");
       Date sDate = startDate.getDate();
       Date eDate = endDate.getDate();   
       String date = t.format(sDate) + " to " + t.format(eDate);
       
       //DateItem date = (DateItem) dateCombo.getSelectedItem();
       checkExcelExist(grossIncomeTable, path, date, "Gross");
       exportChart(giChart, path, "Gross", 442, 310);
    }//GEN-LAST:event_btnExportGrossIncomeActionPerformed

    private void btnExportNetIncomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportNetIncomeActionPerformed
       String path = "btf net income reports.xls" ;
       
       DateFormat t = new SimpleDateFormat("yyyy-MM-dd");
       Date sDate = startDate.getDate();
       Date eDate = endDate.getDate();   
       String date = t.format(sDate) + " to " + t.format(eDate);
       
       //DateItem date = (DateItem) dateCombo.getSelectedItem();
       checkExcelExist(netIncomeTable, path, date, "Net");
       exportChart(netChart, path, "Net", 442, 310);
    }//GEN-LAST:event_btnExportNetIncomeActionPerformed

    private void btnExportVarianceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportVarianceActionPerformed
        //DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
       //Date d = new Date();
       String path = "btf variance reports.xls" ;
       
       DateFormat t = new SimpleDateFormat("yyyy-MM-dd");
       Date sDate = startDate.getDate();
       Date eDate = endDate.getDate();   
       String date = t.format(sDate) + " to " + t.format(eDate);
       
       //DateItem date = (DateItem) dateCombo.getSelectedItem();
       checkExcelExist(varianceTable, path, date, "Variance");
       //exportChart(netChart, path, "Variance", 442, 310);
            
       //DateItem date = (DateItem) dateCombo.getSelectedItem();
       //checkExcelExist(varianceTable, path, date.getValue(), "Variance");
    }//GEN-LAST:event_btnExportVarianceActionPerformed

    private void EODBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EODBtnActionPerformed
        try {
            EODTab et = new EODTab();
            et.setVisible(true);
            dispose();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CGManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(CGManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(CGManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(CGManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_EODBtnActionPerformed

    private void ReportsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReportsBtnActionPerformed

    }//GEN-LAST:event_ReportsBtnActionPerformed

    private void startDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startDateActionPerformed
        //set end date to after
        DateFormat t = new SimpleDateFormat("yyyy-MM-dd");
        Date sDate = startDate.getDate();
        String start = t.format(sDate);

        Calendar cal = startDate.getMonthView().getCalendar();
        cal.setTime(sDate);

        //set minimum to current day
        endDate.getMonthView().setLowerBound(cal.getTime());

        if (isValidDate()) {
            generateSales();
            dateError.setVisible(false);
        } else {
            dateError.setVisible(true);
        }


    }//GEN-LAST:event_startDateActionPerformed

    private void varianceDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_varianceDateActionPerformed
        DateFormat t = new SimpleDateFormat("yyyy-MM-dd");
        Date sDate = varianceDate.getDate();
        String vdate = t.format(sDate);

        generateReport(vdate);
    }//GEN-LAST:event_varianceDateActionPerformed

    private void generateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateBtnActionPerformed
        // TODO add your handling code here:
        Date sDate = startDate.getDate();
        Date eDate = endDate.getDate();

        LocalDate start = new LocalDate(sDate);
        LocalDate end = new LocalDate(eDate);
        if (start.isBefore(end) || start.isEqual(end)) { // CHECK IF START IS <== END

            GITable();
            giChart = makeGIChart();
            expTable();
            expChart = makeExpChart();
            netTable();
            netChart = makeNetChart();
            

        } else {

            dateErrorLabel1.setVisible(true);
            dateErrorLabel2.setVisible(true);
            dateErrorLabel3.setVisible(true);

        }


    }//GEN-LAST:event_generateBtnActionPerformed

    private void btnExportSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportSalesActionPerformed
       String path = "btf sales reports.xls" ;
       
       DateFormat t = new SimpleDateFormat("yyyy-MM-dd");
       Date sDate = startDate.getDate();
       Date eDate = endDate.getDate();   
       String date = t.format(sDate) + " to " + t.format(eDate);
       
       //DateItem date = (DateItem) dateCombo.getSelectedItem();
       checkExcelExist(salesTable, path, date, "Sales");
    }//GEN-LAST:event_btnExportSalesActionPerformed

    private void endDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endDateActionPerformed
        if (isValidDate()) {
            generateSales();
            dateError.setVisible(false);
        } else {
            dateError.setVisible(true);
        }
    }//GEN-LAST:event_endDateActionPerformed

    /**
     * * <--- CLARK'S CODE STARTS HERE ---> **
     */
    
    private void exportToExcel(JTable tables, String path, String date, String reportName) throws FileNotFoundException, IOException, InvalidFormatException {
        HSSFWorkbook wb;
        HSSFSheet sheet;
        JTable table = tables;
        int h;
        
        wb = new HSSFWorkbook();
        sheet = wb.createSheet(reportName); 
        CellStyle style = wb.createCellStyle();
        style.setFillForegroundColor(IndexedColors.AQUA.getIndex());
        style.setFillPattern(CellStyle.SOLID_FOREGROUND);
        style.setBorderRight(CellStyle.BORDER_THIN);
        Row header = sheet.createRow(0);
        Cell headerCell;
        if(reportName.equalsIgnoreCase("Variance")) {
            sheet.setColumnHidden(1, true);
            sheet.setColumnWidth(3, 10000);
            sheet.createFreezePane(3, 0);
            sheet.addMergedRegion(new CellRangeAddress(0, 0, 3, 10));
            headerCell = header.createCell(3);
        } else {
            sheet.addMergedRegion(new CellRangeAddress(0, 0, 1, 8));
            headerCell = header.createCell(1);
        }
        
        headerCell.setCellValue(date);
        headerCell.setCellStyle(style);
        CellUtil.setAlignment(headerCell, wb, CellStyle.ALIGN_CENTER);
        
        Row row = sheet.createRow(3);
        TableModel model = table.getModel();

        Row headerRow = sheet.createRow(1);
        for(int headings = 1; headings <= model.getColumnCount(); headings++){
            headerRow.createCell(headings).setCellValue(model.getColumnName(headings - 1));
        }
        
        for(int rows = 0; rows < model.getRowCount(); rows++){ 
            for(int cols = 1; cols <= table.getColumnCount(); cols++){ 
                sheet.setColumnWidth(cols, 3000);
                String text = model.getValueAt(rows, cols - 1).toString();
                Cell cell = row.createCell(cols); 
                cell.setCellValue(text); 
            }
            row = sheet.createRow((rows + 4)); 
        }
        
        
        sheet.setColumnHidden(0, true);
        
        try {
            FileOutputStream fileOut =  new FileOutputStream(path);
            wb.write(fileOut); 
            fileOut.close();
            JOptionPane.showMessageDialog(null, "Successfully exported the report!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch(FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        
    }
    public void modifyExcel(JTable tables, String path, String date, String reportName) {
        InputStream inp;
        JTable table = tables;
        try {
            inp = new FileInputStream(path);
            Workbook wb = WorkbookFactory.create(inp);
            Sheet sheet = wb.getSheet(reportName);
            CellRangeAddress merge = sheet.getMergedRegion(sheet.getNumMergedRegions() - 1);
            int c1 = merge.getLastColumn() + 1;
            int c2 = c1 + 7;
            Row row = sheet.getRow(3);
            
            sheet.addMergedRegion(new CellRangeAddress(0, 0, c1, c2));
            
            CellStyle style = wb.createCellStyle();
            style.setFillForegroundColor(IndexedColors.AQUA.getIndex());
            style.setFillPattern(CellStyle.SOLID_FOREGROUND);
            style.setBorderRight(CellStyle.BORDER_THIN);
            
            Row header = sheet.getRow(0);
            Cell headerCell = header.createCell(c1);
            headerCell.setCellValue(date);
            headerCell.setCellStyle(style);
            CellUtil.setAlignment(headerCell, wb, CellStyle.ALIGN_CENTER);

            TableModel model = table.getModel(); 

            Row headerRow = sheet.getRow(1);
            
            if(reportName.equals("Variance")) {
                for(int headings = 2; headings < model.getColumnCount(); headings++){ 
                    headerRow.createCell(headings + c1 - 2).setCellValue(model.getColumnName(headings));
                }

                for(int rows = 0; rows < model.getRowCount(); rows++){ 
                    for(int cols = 2; cols < table.getColumnCount(); cols++){ 
                        sheet.setColumnWidth(cols + c1 - 1, 3000);
                        String text = model.getValueAt(rows, cols).toString();
                        Cell cell = row.createCell(cols + c1 - 2); 
                        cell.setCellValue(text); 
                    }

                    row = sheet.getRow((rows + 4)); 
                }
            } else {
                for(int headings = 0; headings < model.getColumnCount(); headings++){ 
                    headerRow.createCell(headings + c1).setCellValue(model.getColumnName(headings));
                }

                for(int rows = 0; rows < model.getRowCount(); rows++){ 
                    for(int cols = 0; cols < table.getColumnCount(); cols++){ 
                        sheet.setColumnWidth(cols + c1, 3000);
                        String text = model.getValueAt(rows, cols).toString();
                        Cell cell = row.createCell(cols + c1); 
                        cell.setCellValue(text); 
                    }

                    row = sheet.getRow((rows + 4)); 
                }
            }

            FileOutputStream fileOut = new FileOutputStream(path);
            wb.write(fileOut);
            fileOut.close();
            JOptionPane.showMessageDialog(null, "Successfully exported the report!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (InvalidFormatException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public void checkExcelExist(JTable tables, String path, String date, String reportName){
        try{
            File file = new File(path);
            if(!file.exists()) {
                exportToExcel(tables, path, date, reportName);
            } else {
                modifyExcel(tables, path, date, reportName);
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    public void exportChart(JFreeChart chart, String path, String reportName, int width, int height) {
        InputStream inp;
        try {
            inp = new FileInputStream(path);
            Workbook wb = WorkbookFactory.create(inp);
            Sheet sheet = wb.getSheet(reportName);
            int r = sheet.getLastRowNum();
            CellRangeAddress merge = sheet.getMergedRegion(sheet.getNumMergedRegions() - 1);
            int c1 = merge.getLastColumn() - 7;
            Row row = sheet.getRow(r);
            
            ByteArrayOutputStream chart_out = new ByteArrayOutputStream();
            ChartUtilities.writeChartAsJPEG(chart_out, chart, width, height);

            int my_picture_id = wb.addPicture(chart_out.toByteArray(), Workbook.PICTURE_TYPE_JPEG);
            chart_out.close();
            HSSFPatriarch drawing = (HSSFPatriarch) sheet.createDrawingPatriarch();
            HSSFClientAnchor a = new HSSFClientAnchor();
            a.setCol1(c1);
            a.setRow1(r);
            
            HSSFPicture picture = drawing.createPicture(a, my_picture_id);
            picture.resize();
            
            FileOutputStream fileOut = new FileOutputStream(path);
            wb.write(fileOut);
            fileOut.close();
            
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    /*public void exportToPDF(JFreeChart chart, String path, int width, int height) {
        try {
            Rectangle pageSize = new Rectangle(width, height);
            Document document = new Document(pageSize, 50, 50, 50, 50);
            PdfWriter writer = PdfWriter.getInstance(document, out);
            document.open();
            PdfContentByte cb = writer.getDirectContent();
            PdfTemplate tp = cb.createTemplate(width, height);
            Graphics2D g2 = tp.createGraphics(width, height, new DefaultFontMapper());
            Rectangle2D r2D = new Rectangle2D.Double(0, 0, width, height);
            chart.draw(g2, r2D);
            g2.dispose();
            cb.addTemplate(tp, 0, 0);
            document.close();
    } catch(Exception e) {
        e.printStackTrace();
    } */
    /**
     * * <--- CLARK'S CODE ENDS HERE ---> **
     */
    /**
     * * <--- KIM'S CODE STARTS HERE ---> **
     */
    // ----------------------- GENERIC CODES
    private void adjustTable(JTable table) {
        for (int column = 0; column < table.getColumnCount(); column++) {
            TableColumn tableColumn = table.getColumnModel().getColumn(column);
            int preferredWidth = tableColumn.getMinWidth();
            int maxWidth = tableColumn.getMaxWidth();

            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
                Component c = table.prepareRenderer(cellRenderer, row, column);
                int width = c.getPreferredSize().width + table.getIntercellSpacing().width;
                preferredWidth = Math.max(preferredWidth, width);

                //  We've exceeded the maximum width, no need to check other rows
                if (preferredWidth >= maxWidth) {
                    preferredWidth = maxWidth;
                    break;
                }
            }

            tableColumn.setPreferredWidth(preferredWidth);
        }
    }

    // ------------------ EXPENSES TAB START
    public void expTable() {

        RecipeBean r = new RecipeBean();
        // <!-- KIM DATEPICKER CODES START -->
        DateFormat t = new SimpleDateFormat("yyyy-MM-dd");
        Date sDate = startDate.getDate();
        String start = t.format(sDate);

        Date eDate = endDate.getDate();
        LocalDate end = new LocalDate(eDate);

        DateTimeFormatter dispFmt = DateTimeFormat.forPattern("MMM, dd");
        DateTimeFormatter compFmt = DateTimeFormat.forPattern("YYYY-MM-dd");

        String cols[] = {"Name", "Expenses"};
        DefaultTableModel actualTable = new DefaultTableModel(cols, 0) {

            @Override
            public boolean isCellEditable(int row, int column) {
                if (column == 0 || column == 1) {
                    return false;
                } else {
                    return true;
                }
            }

        };

        for (LocalDate date = new LocalDate(start); date.isBefore(end) || date.isEqual(end); date = date.plusDays(1)) {

            String sumDate = date.toString(compFmt);
            aSales = sImp.getAllSales(sumDate);
            float total = 0;

            for (RecipeBean sale : aSales) {

                r = rcImp.getRecipeBean(sale.getRecipeID());
                total = total + sImp.getExpensesByRecipeByDay(r, sumDate);

            }

            Object[] data = {date.toString(dispFmt), total};
            actualTable.addRow(data);
            expensesTable.setModel(actualTable);
            adjustTable(expensesTable);

        }
    }

    public JFreeChart makeExpChart() {

        DefaultPieDataset objDataset = new DefaultPieDataset();
        int rows = expensesTable.getRowCount();

        for (int c = 0; c < rows; c++) {

            objDataset.setValue(expensesTable.getValueAt(c, 0).toString(), Float.parseFloat(expensesTable.getValueAt(c, 1).toString())); // retrieve table contents and add to data set

        }

        JFreeChart expChart = ChartFactory.createPieChart("Expenses", objDataset, true, true, false); // makes chart
        expensesPanel.setLayout(new java.awt.BorderLayout());
        ChartPanel chartPanel = new ChartPanel(expChart);
        chartPanel.setPreferredSize(new Dimension(442, 310));
        expensesPanel.add(chartPanel, BorderLayout.CENTER);
        expensesPanel.validate();
        
        return expChart;
    }

    // -------------------- EXPENSES TAB END
    // -------------- GROSS INCOME TAB START
    public void GITable() {
        RecipeBean r = new RecipeBean();

        // <!-- KIM DATEPICKER CODES START -->
        DateFormat t = new SimpleDateFormat("yyyy-MM-dd");
        Date sDate = startDate.getDate();
        String start = t.format(sDate);

        Date eDate = endDate.getDate();
        LocalDate end = new LocalDate(eDate);

        DateTimeFormatter dispFmt = DateTimeFormat.forPattern("MMM, dd");
        DateTimeFormatter compFmt = DateTimeFormat.forPattern("YYYY-MM-dd");
        // <!-- KIM DATEPICKER CODES END -->

        String cols[] = {"Name", "Gross Income"};
        DefaultTableModel actualTable = new DefaultTableModel(cols, 0) {

            @Override
            public boolean isCellEditable(int row, int column) {
                if (column == 0 || column == 1) {
                    return false;
                } else {
                    return true;
                }
            }

        };

        for (LocalDate date = new LocalDate(start); date.isBefore(end) || date.isEqual(end); date = date.plusDays(1)) {
            String sumDate = date.toString(compFmt);
            aSales = sImp.getAllSales(sumDate);
            float total = 0;
            for (RecipeBean sale : aSales) {

                r = rcImp.getRecipeBean(sale.getRecipeID());
                total = total + sImp.getSalesByRecipeByDay(r, sumDate);
            }
            // FILL TABLE
            Object[] data = {date.toString(dispFmt), total};
            actualTable.addRow(data);
            grossIncomeTable.setModel(actualTable);
            adjustTable(grossIncomeTable);

        }

    }

    public JFreeChart makeGIChart() {

        DefaultPieDataset objDataset = new DefaultPieDataset();
        int rows = grossIncomeTable.getRowCount();

        for (int c = 0; c < rows; c++) {

            objDataset.setValue(grossIncomeTable.getValueAt(c, 0).toString(), Float.parseFloat(grossIncomeTable.getValueAt(c, 1).toString())); // retrieve table contents and add to data set

        }

        JFreeChart grossChart = ChartFactory.createPieChart("Gross Income", objDataset, true, true, false); // makes chart
        grossPanel.setLayout(new java.awt.BorderLayout());
        ChartPanel chartPanel = new ChartPanel(grossChart);
        chartPanel.setPreferredSize(new Dimension(442, 310));
        grossPanel.add(chartPanel, BorderLayout.CENTER);
        grossPanel.validate();
        
        return grossChart;
    }
    // ---------------- GROSS INCOME TAB END

    // ---------------- NET INCOME TAB START
    public void netTable() {

        RecipeBean r = new RecipeBean();
        DateFormat t = new SimpleDateFormat("yyyy-MM-dd");
        Date sDate = startDate.getDate();
        String start = t.format(sDate);

        Date eDate = endDate.getDate();
        LocalDate end = new LocalDate(eDate);

        DateTimeFormatter dispFmt = DateTimeFormat.forPattern("MMM, dd");
        DateTimeFormatter compFmt = DateTimeFormat.forPattern("YYYY-MM-dd");
        String cols[] = {"Name", "Net Income"};
        DefaultTableModel actualTable = new DefaultTableModel(cols, 0) {

            @Override
            public boolean isCellEditable(int row, int column) {
                if (column == 0 || column == 1) {
                    return false;
                } else {
                    return true;
                }
            }

        };

        for (LocalDate date = new LocalDate(start); date.isBefore(end) || date.isEqual(end); date = date.plusDays(1)) {

            String sumDate = date.toString(compFmt);
            aSales = sImp.getAllSales(sumDate);
            float total = 0;

            for (RecipeBean sale : aSales) {

                r = rcImp.getRecipeBean(sale.getRecipeID());
                total = total + (sImp.getSalesByRecipeByDay(r, sumDate) - sImp.getExpensesByRecipeByDay(r, sumDate));

            }

            Object[] data = {date.toString(dispFmt), total};
            actualTable.addRow(data);
            netIncomeTable.setModel(actualTable);
            adjustTable(netIncomeTable);

        }

    }

    public JFreeChart makeNetChart() {

        DefaultPieDataset objDataset = new DefaultPieDataset();
        int rows = netIncomeTable.getRowCount();

        for (int c = 0; c < rows; c++) {

            objDataset.setValue(netIncomeTable.getValueAt(c, 0).toString(), Float.parseFloat(netIncomeTable.getValueAt(c, 1).toString())); // retrieve table contents and add to data set

        }

        JFreeChart netChart = ChartFactory.createPieChart("Net Income", objDataset, true, true, false); // makes chart
        netIncomePanel.setLayout(new java.awt.BorderLayout());
        ChartPanel chartPanel = new ChartPanel(netChart);
        netIncomePanel.add(chartPanel, BorderLayout.CENTER);
        netIncomePanel.validate();
        
        return netChart;

    }
    // ------------------ NET INCOME TAB END

    /**
     * * <--- KIM'S CODE ENDS HERE ---> **
     */
    /**
     * * <--- JANE CODE STARTS HERE ---> **
     */
    //**GENERIC **//
    private boolean isValidDate() {
        DateFormat t = new SimpleDateFormat("yyyy-MM-dd");
        Date sDate = startDate.getDate();
        Date eDate = endDate.getDate();
        String start = t.format(sDate);
        String end = t.format(eDate);
        if (end.compareTo(start) < 0) { //if end date is before start
            return false;
        }

        return true;
    }

    private ArrayList<RecipeBean> getAllRecipes(ArrayList<RecipeBean> o, ArrayList<RecipeBean> a) {
        ArrayList<Integer> oRC = new ArrayList<Integer>();
        ArrayList<Integer> aRC = new ArrayList<Integer>();

        for (RecipeBean r : o) {
            oRC.add(r.getRecipeID());
        }

        for (RecipeBean r : a) {
            aRC.add(r.getRecipeID());
        }

        HashSet<Integer> nRC = new LinkedHashSet<Integer>();
        nRC.addAll(oRC);
        nRC.addAll(aRC);

        oRC.clear();
        oRC.addAll(nRC);

        o.clear();
        for (int i : oRC) {
            o.add(rcImp.getRecipeBean(i));
        }

        return o;

    }

    //** FOR SALES **//
    private void generateSales() {
        DateFormat t = new SimpleDateFormat("yyyy-MM-dd");
        Date sDate = startDate.getDate();
        Date eDate = endDate.getDate();
        String start = t.format(sDate);
        String end = t.format(eDate);

        ArrayList<String> aSDates = sImp.getRangeDates(start, end); //get range
        if (aSDates != null) {
            ArrayList<RecipeBean> oSRecipes = new ArrayList<RecipeBean>();
            ArrayList<RecipeBean> aSRecipes = new ArrayList<RecipeBean>();
            ArrayList<RecipeBean> pSRecipes = new ArrayList<RecipeBean>();

            ArrayList<String> cols = new ArrayList<String>();
            cols.add("Recipe ID");
            cols.add("Recipe");

            //int count = 1;
            //get all recipes
            for (String d : aSDates) {
                cols.add(d);
                if (!aSRecipes.isEmpty()) {
                    aSRecipes.clear();
                }
                aSRecipes = sImp.getAllSales(d);
                oSRecipes = getAllRecipes(oSRecipes, aSRecipes);
                /*
                 System.out.println("ROLL " + count);
                 for (RecipeBean h : oSRecipes) {
                 System.out.println(h.getRecipe());
                 }
                 System.out.println();
                 count++;*/
            }

            String colmns[] = new String[cols.size()];
            colmns = cols.toArray(colmns);

            DefaultTableModel salesModel = new DefaultTableModel(colmns, 0) {
                @Override
                public Class getColumnClass(int col) {
                    if (col == 0) {
                        return Integer.class;
                    } else if (col == 1) {
                        return String.class;
                    }else{
                        return Float.class;
                    }
                }
            };

            for (RecipeBean r : oSRecipes) {
                ArrayList<Object> data = new ArrayList<Object>();
                NumberFormat nFormatter = new DecimalFormat("#0.00");
                data.add(r.getRecipeID());
                data.add(r.getRecipe());
                for (String d : aSDates) {
                    float s = sImp.getQuantityByRecipeByDay(d, "sales", r);
                    data.add(Float.parseFloat(nFormatter.format(s)));
                }

                Object row[] = new Object[data.size()];
                row = data.toArray(row);

                salesModel.addRow(row);
            }

            salesTable.setModel(salesModel);
            //adjustTable(salesTable);
            salesTable.getColumnModel().getColumn(0).setMinWidth(0);
            salesTable.getColumnModel().getColumn(0).setMaxWidth(0);

        }

    }
    //**FOR SALES END **/

    //** FOR VARIANCE START **//
    private void generateReport(String d) {
        ArrayList<RawBean> aRaw = tcImp.getAllTRaw(d); //recipes w beginning already set
        String cols[] = {"Raw ID", "Raw Material", "Beginning", "Sales", "Delivery", "Used", "Transfer", "Wastage", "Actual Count", "Variance"};
        DefaultTableModel varianceModel = new DefaultTableModel(cols, 0);

        for (RawBean rw : aRaw) {
            float sales = computeSales(rw, d); //!!!
            float delivery = tcImp.getQuantityByDayByRaw(d, "delivery", rw);
            float used = tcImp.getQuantityByDayByRaw(d, "used", rw);
            float transferred = tcImp.getQuantityByDayByRaw(d, "transferred", rw);
            float wastage = tcImp.getQuantityByDayByRaw(d, "delivery", rw);
            float actual = tcImp.getQuantityByDayByRaw(d, "actual", rw);
            float variance = rw.getStock() + delivery - sales - used - transferred - wastage - actual;

            Object iRaw[] = {rw.getRawID(), rw.getRaw(),
                rw.getStock(),
                Float.parseFloat(String.format("%.2f", sales)),
                Float.parseFloat(String.format("%.2f", delivery)),
                Float.parseFloat(String.format("%.2f", used)),
                Float.parseFloat(String.format("%.2f", transferred)),
                Float.parseFloat(String.format("%.2f", wastage)),
                Float.parseFloat(String.format("%.2f", actual)),
                Float.parseFloat(String.format("%.2f", variance))};

            varianceModel.addRow(iRaw);
        }

        varianceTable.setModel(varianceModel);
        varianceTable.getColumnModel().getColumn(0).setMinWidth(0);
        varianceTable.getColumnModel().getColumn(0).setMaxWidth(0);
        adjustTable(varianceTable);
        btnExportVariance.setVisible(true);
    }

    private float computeSales(RawBean r, String d) {
        float total = 0;
        ArrayList<RecipeBean> sRecipe = sImp.getAllSales(d);
        ArrayList<Integer> sRecipeID;
        
        for(RecipeBean rc: sRecipe){
            for(IngredientBean i: inImp.getIngredientsBydate(rc, d)){
                if(i.getRaw().getRawID() == r.getRawID()){
                    total += sImp.getQuantityByRecipeByDay(d, "sales", rc)*i.getAmount();
                    break;
                }
            }
        }
        

        //get a
        return total;
    }

    //** FOR VARIANCE END **//
    ChangeListener changeListener = new ChangeListener() {
        public void stateChanged(ChangeEvent changeEvent) {
            JTabbedPane sourceTabbedPane = (JTabbedPane) changeEvent.getSource();
            int index = sourceTabbedPane.getSelectedIndex();
            //System.out.println("INDEX: "+ index);
            if (sourceTabbedPane.getTitleAt(index).equals("VARIANCE")) {
                startDate.setVisible(false);
                endDate.setVisible(false);

                fromLabel.setVisible(false);
                toLabel.setVisible(false);
            } else {
                startDate.setVisible(true);
                endDate.setVisible(true);

                fromLabel.setVisible(true);
                toLabel.setVisible(true);
            }
            //System.out.println("Tab changed to: " + sourceTabbedPane.getTitleAt(index));
        }
    };
    /**
     * * <--- JANE CODE ENDS HERE ---> **
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Background;
    private javax.swing.JButton CategoriesBtn;
    private javax.swing.JButton EODBtn;
    private javax.swing.JButton InventoryBtn;
    private javax.swing.JButton RMBtn;
    private javax.swing.JButton RecipesBtn;
    private javax.swing.JButton ReportsBtn;
    private javax.swing.JPanel Sales;
    private javax.swing.JButton btnExportExpenses;
    private javax.swing.JButton btnExportGrossIncome;
    private javax.swing.JButton btnExportNetIncome;
    private javax.swing.JButton btnExportSales;
    private javax.swing.JButton btnExportVariance;
    private javax.swing.JLabel dateError;
    private javax.swing.JLabel dateErrorLabel1;
    private javax.swing.JLabel dateErrorLabel2;
    private javax.swing.JLabel dateErrorLabel3;
    private org.jdesktop.swingx.JXDatePicker endDate;
    private javax.swing.JPanel expensesPanel;
    private javax.swing.JTable expensesTable;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JButton generateBtn;
    private javax.swing.JTable grossIncomeTable;
    private javax.swing.JPanel grossPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel netIncomePanel;
    private javax.swing.JTable netIncomeTable;
    private javax.swing.JTable salesTable;
    private org.jdesktop.swingx.JXDatePicker startDate;
    private javax.swing.JLabel toLabel;
    private org.jdesktop.swingx.JXDatePicker varianceDate;
    private javax.swing.JTable varianceTable;
    // End of variables declaration//GEN-END:variables
}
