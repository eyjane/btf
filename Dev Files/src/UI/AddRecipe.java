/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Beans.CategoryBean;
import Beans.IngredientBean;
import Beans.RawBean;
import Beans.RecipeBean;
import DAO.Implementation.CategoryDAOImplementation;
import DAO.Implementation.IngredientDAOImplementation;
import DAO.Implementation.RawDAOImplementation;
import DAO.Implementation.RecipeDAOImplementation;
import DAO.Interface.CategoryDAOInterface;
import DAO.Interface.IngredientDAOInterface;
import DAO.Interface.RawDAOInterface;
import DAO.Interface.RecipeDAOInterface;
import java.awt.Component;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

/**
 *
 * @author earleenjanefuentes
 */
public class AddRecipe extends javax.swing.JFrame {

    private CategoryDAOInterface catImp = new CategoryDAOImplementation();
    private RawDAOInterface rawImp = new RawDAOImplementation();
    private RecipeDAOInterface rcImp = new RecipeDAOImplementation();
    private IngredientDAOInterface inImp = new IngredientDAOImplementation();
    private ArrayList<IngredientBean> aIngredient = new ArrayList<IngredientBean>();

    addIngredient AddIngredient;
    RCManagement rcman;

    /**
     * Creates new form AddRecipe
     */
    public AddRecipe(RCManagement r) throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {
        String laf = UIManager.getSystemLookAndFeelClassName();
        UIManager.setLookAndFeel(laf);
        this.rcman = r;

        initComponents();
        nameError.setVisible(false);
        errorLabel2.setVisible(false);
        inError.setVisible(false);
        prepareTable();
        prepareCombo();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        actualLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        costField = new javax.swing.JTextField();
        categoryBox = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        ingredientsTable = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        addRecipe = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        nameError = new javax.swing.JLabel();
        errorLabel2 = new javax.swing.JLabel();
        inError = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
<<<<<<< HEAD
        editIngredients = new javax.swing.JButton();
=======
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
>>>>>>> 48111f9bc2377ab9d7e49c9257c8a6b79128378b
        jScrollPane1 = new javax.swing.JScrollPane();
        recipeTable = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(956, 555));
        setMinimumSize(new java.awt.Dimension(956, 555));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        jLabel1.setText("Add Recipe");

        jLabel2.setText("Name: ");

        actualLabel.setText("0.00");
<<<<<<< HEAD
=======

        jLabel4.setText("Stock:");
>>>>>>> 48111f9bc2377ab9d7e49c9257c8a6b79128378b

        jLabel5.setText("Category: ");

        jLabel6.setText("Ingredients:");

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        categoryBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryBoxActionPerformed(evt);
            }
        });

        ingredientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        ingredientsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ingredientsTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(ingredientsTable);

        addRecipe.setText("Add Recipe");
        addRecipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRecipeActionPerformed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        nameError.setForeground(new java.awt.Color(255, 0, 51));
        nameError.setText("ERROR: Required field.");

        errorLabel2.setForeground(new java.awt.Color(255, 0, 51));
        errorLabel2.setText("ERROR: Required field. Please input valid number.");

        inError.setForeground(new java.awt.Color(255, 0, 51));
        inError.setText("ERROR: Recipe must have at least one ingredient.");
<<<<<<< HEAD
=======

        errorLabel4.setForeground(new java.awt.Color(255, 0, 51));
        errorLabel4.setText("ERROR: Required field. Please input valid number.");
>>>>>>> 48111f9bc2377ab9d7e49c9257c8a6b79128378b

        jLabel7.setText("Cost: ");

        jLabel8.setText("Actual Price:");

<<<<<<< HEAD
        editIngredients.setText("Edit Ingredient");
        editIngredients.setPreferredSize(new java.awt.Dimension(96, 22));
        editIngredients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editIngredientsActionPerformed(evt);
            }
        });
=======
        jButton1.setText("BACK");

        jButton2.setText("Add Ingredients");
        jButton2.setPreferredSize(new java.awt.Dimension(96, 22));

        jButton3.setText("Edit Ingredients");

        jButton4.setText("Delete This Ingredient");
>>>>>>> 48111f9bc2377ab9d7e49c9257c8a6b79128378b

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
<<<<<<< HEAD
=======
                    .addComponent(jButton1)
>>>>>>> 48111f9bc2377ab9d7e49c9257c8a6b79128378b
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(36, 36, 36)
                                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(nameError))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(41, 41, 41)
                                .addComponent(costField, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(errorLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(30, 30, 30)
                                .addComponent(actualLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
<<<<<<< HEAD
=======
                                .addComponent(jLabel4)
                                .addGap(40, 40, 40)
                                .addComponent(stockField, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(errorLabel4))
                            .addGroup(jPanel1Layout.createSequentialGroup()
>>>>>>> 48111f9bc2377ab9d7e49c9257c8a6b79128378b
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(categoryBox, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
<<<<<<< HEAD
=======
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inError)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
>>>>>>> 48111f9bc2377ab9d7e49c9257c8a6b79128378b
                        .addGap(107, 107, 107)
                        .addComponent(addRecipe, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancel)))
                .addGap(122, 122, 122))
<<<<<<< HEAD
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(inError)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(editIngredients, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(150, 150, 150))
=======
>>>>>>> 48111f9bc2377ab9d7e49c9257c8a6b79128378b
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(nameError))))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(costField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(errorLabel2))))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(actualLabel))
<<<<<<< HEAD
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(categoryBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inError)
                        .addGap(39, 39, 39)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addRecipe)
                            .addComponent(cancel)))
                    .addComponent(editIngredients, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(76, 76, 76))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 480, 620));
=======
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stockField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(errorLabel4))))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(categoryBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addRecipe)
                    .addComponent(cancel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(inError)
                .addGap(19, 19, 19)
                .addComponent(jButton1))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 480, -1));
>>>>>>> 48111f9bc2377ab9d7e49c9257c8a6b79128378b

        recipeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ));
        recipeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                recipeTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(recipeTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(493, 60, 410, -1));

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel9.setText("Recipes");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(493, 22, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void categoryBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryBoxActionPerformed

    private void addRecipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRecipeActionPerformed
        boolean add = true;
        ArrayList<RecipeBean> avRecipe = rcImp.getRecipeByStatus("available");
        int j;

        if (!nameField.getText().toString().isEmpty()) {
            if (avRecipe != null) {
                for (j = 0; j < avRecipe.size(); j++) {
                    if (avRecipe.get(j).getRecipe().equalsIgnoreCase(nameField.getText().toString())) {
                        nameError.setText("ERROR: Duplicate entry.");
                        nameError.setVisible(true);
                        add = false;
                        break;
                    }
                }
            }

            if (add) {
                nameError.setVisible(false);
            }

        } else {
            nameError.setVisible(true);
            nameError.setText("ERROR: Required Field");
            add = false;
        }

        String cost = costField.getText().toString();
        if ((!costField.getText().toString().isEmpty()) && isNumber(cost) && Float.parseFloat(cost) > 0) {
            errorLabel2.setVisible(false);
        } else {
            errorLabel2.setVisible(true);
            add = false;
        }

        if (!(aIngredient.isEmpty())) {
            inError.setVisible(false);

        } else {
            inError.setVisible(true);
            add = false;
        }


        if (add) {
            RecipeBean r = new RecipeBean();
            r.setRecipe(nameField.getText().toString());
            r.setCost(Float.parseFloat(costField.getText().toString()));
            CategoryBean category = (CategoryBean) categoryBox.getSelectedItem();
            r.setCategory(category.getCategoryID());
            r.setRcstatus("available");

            if (rcImp.addRecipe(r)) {
                r.setRecipeID(rcImp.getLatestAddedID());
                for (IngredientBean i : aIngredient) {
                    inImp.addIngredient(r, i);
                }

                JOptionPane.showMessageDialog(null, "Recipe successfully added!");
                nameField.setText("");
                 costField.setText("");
                 categoryBox.setSelectedIndex(0);
                 aIngredient.clear();
                 actualLabel.setText("0.00");
                 prepareCombo();
                 prepareTable();
                 
                //rcman.setVisible(true);
                //this.setVisible(false);
                //rcman.prepareTable();
            }
        }
    }//GEN-LAST:event_addRecipeActionPerformed

    private void ingredientsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ingredientsTableMouseClicked

    }//GEN-LAST:event_ingredientsTableMouseClicked

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        rcman.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_cancelActionPerformed

    private void recipeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_recipeTableMouseClicked
        /*       ArrayList<CategoryBean> aCategory = catImp.getAllCategory();
        try {
            int rselect = recipeTable.getSelectedRow();
            int rID = Integer.parseInt(recipeTable.getModel().getValueAt(rselect, 0).toString());
            RecipeBean r = rcImp.getRecipeBean(rID);
            //recipeIDLabel.setText(String.valueOf(r.getRecipeID()));
            //    nameField.setText(r.getRecipe());
            //    costField.setText(String.format("%.2f", r.getCost()));
            //    actualLabel.setText(String.format("%.2f", r.getActualPrice()));

            for (CategoryBean c : aCategory) {
                //        categoryBox.addItem(c);
                if (c.getCategoryID() == r.getCategory()) {
                    //            categoryBox.setSelectedIndex(categoryBox.getItemCount() - 1);
                }
            }
            //CategoryBean ct = (CategoryBean)categoryBox.getSelectedItem();
            //System.out.println("SELECTED " + ct.getCategoryID());

            String cols[] = {"Raw ID", "Ingredient", "Quantity", "Unit of Measurement"};
            DefaultTableModel model = new DefaultTableModel(cols, 0);

            for (IngredientBean rw : r.getIngredients()) {
                RawBean rwm = rw.getRaw();
                Object[] i = {rwm.getRawID(), rwm.getRaw(), String.format("%.2f", rw.getAmount()), rwm.getUom()};
                model.addRow(i);
            }

            //     ingredientsTable.setModel(model);
            //   ingredientsTable.getColumnModel().getColumn(0).setMinWidth(0);
            //   ingredientsTable.getColumnModel().getColumn(0).setMaxWidth(0);

            // adjustTable(ingredientsTable);
        } catch (Exception e) {
            System.out.println(e);
        }
        */
    }//GEN-LAST:event_recipeTableMouseClicked

<<<<<<< HEAD
    private void editIngredientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editIngredientsActionPerformed
                int nrow = ingredientsTable.getRowCount();
        //System.out.println(nrow);

        int i;
        int rid;

        aIngredient = new ArrayList<IngredientBean>();
        if (nrow != 0) {
            for (i = 0; i < nrow; i++) {
                IngredientBean ibean = new IngredientBean();
                RawBean rbean = new RawBean();
                rid = Integer.parseInt(ingredientsTable.getModel().getValueAt(i, 0).toString());
                rbean = rawImp.getRaw(rid);
                ibean.setRaw(rbean);
                ibean.setAmount(Float.parseFloat(ingredientsTable.getModel().getValueAt(i, 2).toString()));
                aIngredient.add(ibean);
            }
        }

        try {
            AddIngredient = new addIngredient(this, aIngredient, nameField.getText());
            AddIngredient.setVisible(true);
            this.setVisible(false);
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_editIngredientsActionPerformed

=======
>>>>>>> 48111f9bc2377ab9d7e49c9257c8a6b79128378b
    /**
     * * <--- JANERYS CODE STARTS HERE ---> **
     */
    //prepare comboBox
    public void computeActual() {
        RecipeBean rtemp = new RecipeBean();
        rtemp.setIngredients(aIngredient);
        actualLabel.setText(String.format("%.2f", rtemp.getActualPrice()));

    }

    /* PREPARE TABLE */
    public void prepareTable() {
        ArrayList<RecipeBean> avRecipes = new ArrayList<RecipeBean>();
        ArrayList<CategoryBean> aCategory = new ArrayList<CategoryBean>();
        ArrayList<IngredientBean> avIngredients = new ArrayList<IngredientBean>();

        String rCategory = null;
        int i, j;

        aCategory = catImp.getAllCategory();
        avRecipes = rcImp.getRecipeByStatus("available");

        String cols[] = {"Recipe ID", "Recipe", "Actual Price", "Cost", "Category"};
        DefaultTableModel recipeModel = new DefaultTableModel(cols, 0);
        //System.out.println(avRecipes.get(1).getRecipe());

        for (RecipeBean r : avRecipes) {

            for (CategoryBean c : aCategory) {
                if (r.getCategory() == c.getCategoryID()) {
                    rCategory = c.getCategory();
                    break;
                }
            }

            Object[] data = {r.getRecipeID(), r.getRecipe(), String.format("%.2f", r.getActualPrice()), String.format("%.2f", r.getCost()), rCategory};
            recipeModel.addRow(data);
        }

        recipeTable.setModel(recipeModel);
        recipeTable.getColumnModel().getColumn(0).setMinWidth(0);
        recipeTable.getColumnModel().getColumn(0).setMaxWidth(0);

        adjustTable(recipeTable);

        String icols[] = {"Raw ID", "Ingredient", "Quantity", "Unit of Measurement"};
        DefaultTableModel model = new DefaultTableModel(icols, 0);

    }
    
    //prepare comboBox
    public void prepareCombo() {
        //System.out.println("prepare..");
        ArrayList<CategoryBean> aCategory = catImp.getAllCategory();

        for (CategoryBean c : aCategory) {
            categoryBox.addItem(c);
        }

        String cols[] = {"Raw ID", "Raw Material", "Quantity"};
        DefaultTableModel ingredientModel = new DefaultTableModel(cols, 0);
        ingredientsTable.setModel(ingredientModel);
        ingredientsTable.getColumnModel().getColumn(0).setMinWidth(0);
        ingredientsTable.getColumnModel().getColumn(0).setMaxWidth(0);

        if (aIngredient != null) {
            for (IngredientBean ibean : aIngredient) {
                Object[] ingredient = {ibean.getRaw().getRawID(), ibean.getRaw().getRaw(), ibean.getAmount()};
                ingredientModel.addRow(ingredient);
            }
            ingredientsTable.setModel(ingredientModel);

        } else {
            //System.out.println("aIngredient is null");
        }

    }

    //check if number
    private boolean isNumber(String s) {
        try {
            Float.parseFloat(s);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public void inErrorV(boolean b) {
        inError.setVisible(b);
    }
    
    private void adjustTable(JTable table) {
        for (int column = 0; column < table.getColumnCount(); column++) {
            TableColumn tableColumn = table.getColumnModel().getColumn(column);
            int preferredWidth = tableColumn.getMinWidth();
            int maxWidth = tableColumn.getMaxWidth();

            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
                Component c = table.prepareRenderer(cellRenderer, row, column);
                int width = c.getPreferredSize().width + table.getIntercellSpacing().width;
                preferredWidth = Math.max(preferredWidth, width);

                //  We've exceeded the maximum width, no need to check other rows
                if (preferredWidth >= maxWidth) {
                    preferredWidth = maxWidth;
                    break;
                }
            }

            tableColumn.setPreferredWidth(preferredWidth);
        }
    }

    /**
     * * <--- JANERYS CODE ENDS HERE ---> **
     */
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel actualLabel;
    private javax.swing.JButton addRecipe;
    private javax.swing.JButton cancel;
    private javax.swing.JComboBox categoryBox;
    private javax.swing.JTextField costField;
<<<<<<< HEAD
    private javax.swing.JButton editIngredients;
=======
>>>>>>> 48111f9bc2377ab9d7e49c9257c8a6b79128378b
    private javax.swing.JLabel errorLabel2;
    private javax.swing.JLabel inError;
    private javax.swing.JTable ingredientsTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel nameError;
    private javax.swing.JTextField nameField;
    private javax.swing.JTable recipeTable;
<<<<<<< HEAD
=======
    private javax.swing.JTextField stockField;
>>>>>>> 48111f9bc2377ab9d7e49c9257c8a6b79128378b
    // End of variables declaration//GEN-END:variables
}
